<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jy.zhongye.dao.account.AccountDao">

    <!--User-role-permission resultmap-->
    <resultMap id="BaseUserResultMap" type="jy.zhongye.entity.account.User">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
    </resultMap>

    <resultMap id="BaseRoleResultMap" type="jy.zhongye.entity.account.Role">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="role_name" jdbcType="VARCHAR" property="roleName" />
        <result column="role_desc" jdbcType="VARCHAR" property="roleDesc" />
    </resultMap>

    <resultMap id="BasePermissionResultMap" type="jy.zhongye.entity.account.Permission">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="permission_name" jdbcType="VARCHAR" property="permissionName" />
        <result column="permission_desc" jdbcType="VARCHAR" property="permissionDesc" />
    </resultMap>

    <!--User-->
    <delete id="deleteUser" parameterType="java.lang.Long">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from user
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insertUser" parameterType="jy.zhongye.entity.account.User">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into user (id, username, `password`
        )
        values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateUser" parameterType="jy.zhongye.entity.account.User">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update user
        set username = #{username,jdbcType=VARCHAR},
        `password` = #{password,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectUser" parameterType="java.lang.Long" resultMap="BaseUserResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, username, `password`
        from user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectAllUser" resultMap="BaseUserResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, username, `password`
        from user
    </select>

    <!--Role-->
    <delete id="deleteRole" parameterType="java.lang.Long">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from role
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insertRole" parameterType="jy.zhongye.entity.account.Role">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into role (id, role_name, role_desc
        )
        values (#{id,jdbcType=BIGINT}, #{roleName,jdbcType=VARCHAR}, #{roleDesc,jdbcType=VARCHAR}
        )
    </insert>

    <update id="updateRole" parameterType="jy.zhongye.entity.account.Role">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update role
        set role_name = #{roleName,jdbcType=VARCHAR},
        role_desc = #{roleDesc,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectRole" parameterType="java.lang.Long" resultMap="BaseRoleResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, role_name, role_desc
        from role
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectAllRole" resultMap="BaseRoleResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, role_name, role_desc
        from role
    </select>

    <!--Permission    -->
    <delete id="deletePermission" parameterType="java.lang.Long">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from permission
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insertPermission" parameterType="jy.zhongye.entity.account.Permission">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into permission (id, permission_name, permission_desc
        )
        values (#{id,jdbcType=BIGINT}, #{permissionName,jdbcType=VARCHAR}, #{permissionDesc,jdbcType=VARCHAR}
        )
    </insert>

    <update id="updatePermission" parameterType="jy.zhongye.entity.account.Permission">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update permission
        set permission_name = #{permissionName,jdbcType=VARCHAR},
        permission_desc = #{permissionDesc,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectPermission" parameterType="java.lang.Long" resultMap="BasePermissionResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, permission_name, permission_desc
        from permission
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectAllPermission" resultMap="BasePermissionResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, permission_name, permission_desc
        from permission
    </select>

    <!--User-Role-Permission-->
    <!--得到相应用户名密码-->
    <select id="getPassword" resultType="String">
        select password from user where username = #{username}
    </select>

    <!--list用户名的所有角色-->
    <select id="listRoles" resultType="jy.zhongye.entity.account.Role"
            resultMap="BaseRoleResultMap">
        select tb2.* from user tb
        left join user_role tb1 on tb.id = tb1.uid
        left join role tb2 on tb1.rid = tb2.id
        where tb.username = #{username}
    </select>

    <!--list用户名的所有权限-->
    <select id="listPermissions" resultType="jy.zhongye.entity.account.Permission"
            resultMap="BasePermissionResultMap">
        select tb4.* from user tb
        left join user_role tb1 on tb.id = tb1.rid
        left join role tb2 on tb1.rid = tb2.id
        left join role_permission tb3 on tb2.id=tb3.rid
        left join permission tb4 on tb3.pid=tb4.id
        where tb.username = #{username}
    </select>

    <!--通过role查询所有权限-->
    <select id="listPermissionsByRole"
            resultMap="BasePermissionResultMap">
        select tb2.*
        from role tb
        left join role_permission tb1
        on tb.id=tb1.rid
        left join permission tb2
        on tb1.pid=tb2.id
        where tb.role_name=#{roleName}
    </select>

    <!--通过用户名得到实体用户-->
    <select id="getUserByUsername" resultMap="BaseUserResultMap">
        select * from user where username = #{username}
    </select>

    <!--通过用户名得到实体角色-->
    <select id="getRoleByRoleName" resultMap="BaseRoleResultMap">
        select * from role where role_name = #{roleName}
    </select>

    <!--通过用户名得到实体权限-->
    <select id="getPermissionByPermissionName" resultMap="BasePermissionResultMap">
        select * from permission where permission_name = #{permissionName}
    </select>

    <!--给一个用户添加角色-->
    <insert id="userAddRole">
    insert into user_role(uid,rid) values(#{user.id},#{role.id})
    </insert>

    <!--给一个用户删除角色-->
    <delete id="userDeleteRole">
    delete from user_role where uid=#{user.id} and rid=#{role.id}
    </delete>

    <!--给一个角色添加权限-->
    <insert id="roleAddPermissions">
    insert into role_permission(rid,pid) values(#{role.id},#{permission.id})
    </insert>

    <!--给一个用户添加角色-->
    <delete id="roleDeletePermission">
    delete from role_permission where rid=#{role.id} and pid=#{permission.id}
    </delete>

</mapper>
