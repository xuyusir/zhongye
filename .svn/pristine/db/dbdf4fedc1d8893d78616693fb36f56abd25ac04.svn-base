package jy.zhongye.controller.account;

import jy.zhongye.dao.account.AccountDao;
import jy.zhongye.entity.account.Permission;
import jy.zhongye.entity.account.Role;
import jy.zhongye.entity.account.User;
import jy.zhongye.entity.common.Result;
import jy.zhongye.entity.common.ResultEnum;
import jy.zhongye.service.account.AccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/account")
public class AccountController {

    @Autowired
    AccountService accountService;
    @Autowired
    AccountDao accountDao;


    /***
     * @method listUsers
     * @description list all users and user's roles
     * @author
     * @date
     * @param
     * @return
     */
    @RequestMapping("/listUsers")
    public Result listUsers() {

        //返回所有用户并获取用户拥有角色
        List<User> users = accountService.selectAllUser();
        for (User u : users) {
            List<Role> s = accountService.listRoles(u);
            u.setRoles(s);
        }

        return new Result(ResultEnum.SUCCESS,users);
    }

    /***
     * @method listRoles
     * @description list all roles and role's permission
     * @author
     * @date
     * @param
     * @return
     */
    @RequestMapping("/listRoles")
    public Result listRoles() {

        List<Role> roles = accountService.selectAllRole();
        for (Role r : roles) {
            List<Permission> p = accountService.listPermissionsByRole(r);
            r.setPermissions(p);
        }

        return new Result(ResultEnum.SUCCESS,roles);
    }

    /***
     * @method listPermissions
     * @description list all permissions
     * @author
     * @date
     * @param
     * @return
     */
    @RequestMapping("/listPermissions")
    public Result listPermissions() {

        List<Permission> permissions = accountService.selectAllPermission();

        return new Result(ResultEnum.SUCCESS,permissions);
    }

    /**
     * @Description:
     * @Param: []
     * @return: java.lang.String
     * @Author: Mr.Xuyu
     * @Date: 2019-01-10
     */
    @RequestMapping("/addUser")
    public String addUser(HttpServletRequest reg, HttpServletResponse response) {

        String username=reg.getParameter("username");
        String password=reg.getParameter("password");
        String[] rolesTem = reg.getParameterValues("roles");

        List<Role> roles = new ArrayList<Role>();
        for (String r : rolesTem) {
            Role role = accountService.getRoleByRoleName(r);
            roles.add(role);
        }

        accountService.addUser(username,password,roles);

        return "ok";
    }

    @RequestMapping("/addRole")
    public String addRole(HttpServletRequest reg, HttpServletResponse response) {

        String roleName=reg.getParameter("roleName");
        String roleDesc=reg.getParameter("roleDesc");
        String[] permissionsTem = reg.getParameterValues("permissions");

        List<Permission> permissions = new ArrayList<Permission>();
        for (String p : permissionsTem) {
            Permission permission = accountService.getPermissionByPermissionName(p);
            permissions.add(permission);
        }

        accountService.addRole(roleName,roleDesc,permissions);

        return "ok";
    }


}
